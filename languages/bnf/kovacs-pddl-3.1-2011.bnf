Complete BNF description of PDDL 3.1 (completely corrected)

Daniel L. Kovacs (dkovacs@mit.bme.hu)

1 BNF definition of PDDL 3.1
Hereby a complete BNF syntax definition of the PDDL 3.1 language is presented
(completely corrected) based on the originally published articles and information about
PDDL 1.2, 2.1, 2.2, 3.0 and 3.1 [1-5].

1.1 Domain description
<domain>

<require-def>
<require-key>
<types-def>
<constants-def>
<predicates-def>
<atomic formula skeleton>
<predicate>
<variable>
<atomic function skeleton>
<function-symbol>
<functions-def>
<function typed list (x)>
<function typed list (x)>
<function typed list (x)>

::= (define (domain <name>)
[<require-def>]
[<types-def>]:typing
[<constants-def>]
[<predicates-def>]
[<functions-def>]:fluents
[<constraints>]
<structure-def>*)
::= (:requirements <require-key>+)
::= See Section 1.3
::= (:types <typed list (name)>)
::= (:constants <typed list (name)>)
::= (:predicates <atomic formula skeleton>+)
::= (<predicate> <typed list (variable)>)
::= <name>
::= ?<name>
::= (<function-symbol> <typed list (variable)>)
::= <name>
::=:fluents (:functions <function typed list (atomic function skeleton)>)
::= x+ - <function type> <function typed list(x)>
::=
::=:numeric-fluents x+
This is deprecated since PDDL 3.1, where the default fluent type is number.

<pre-GD>
<pre-GD>
<pre-GD>
<pref-GD>
<pref-GD>
<pref-name>
<GD>
<GD>
<GD>
<GD>
<GD>
<GD>
<GD>
<GD>
<GD>
<f-comp>
<literal(t)>
<literal(t)>
<atomic formula(t)>
<atomic formula(t)>

::=:numeric-fluents number
::=:typing + :object-fluents <type>
::=:constraints (:constraints <con-GD>)
::= <action-def>
::=:durative−actions <durative-action-def>
::=:derived−predicates <derived-def>
::= x*
::=:typing x+ - <type> <typed list(x)>
::= <name>
::= object
::= (either <primitive-type>+)
::= <primitive-type>
::= ()
::= x
::= (:action <action-symbol>
:parameters (<typed list (variable)>)
<action-def body>)
::= <name>
::= [:precondition <emptyOr (pre-GD)>]
[:effect <emptyOr (effect)>]
::= <pref-GD>
::= (and <pre-GD>*)
::=:universal−preconditions (forall (<typed list(variable)>) <pre-GD>)
::=:preferences (preference [<pref-name>] <GD>)
::= <GD>
::= <name>
::= <atomic formula(term)>
::=:negative−preconditions <literal(term)>
::= (and <GD>*)
::=:disjunctive−preconditions (or <GD>*)
::=:disjunctive−preconditions (not <GD>)
::=:disjunctive−preconditions (imply <GD> <GD>)
::=:existential−preconditions (exists (<typed list(variable)>) <GD> )
::=:universal−preconditions (forall (<typed list(variable)>) <GD> )
::=:numeric-fluents <f-comp>
::= (<binary-comp> <f-exp> <f-exp>)
::= <atomic formula(t)>
::= (not <atomic formula(t)>)
::= (<predicate> t*)
::=:equality (= t t)

<term>
<term>

::= <name>
::= <variable>

<function type>
<function type>
<constraints>
<structure-def>
<structure-def>
<structure-def>
<typed list (x)>
<typed list (x)>
<primitive-type>
<primitive-type>
<type>
<type>
<emptyOr (x)>
<emptyOr (x)>
<action-def>
<action-symbol>
<action-def body>

1

Complete BNF description of PDDL 3.1 (completely corrected)

<term>
<function-term>
<f-exp>
<f-exp>
<f-exp>
<f-exp>
<f-exp>
<f-head>
<f-head>
<binary-op>
<binary-op>
<binary-op>
<multi-op>
<multi-op>
<binary-comp>
<binary-comp>
<binary-comp>
<binary-comp>
<binary-comp>
<name>
<letter>
<any char>
<number>
<digit>
<decimal>
<effect>
<effect>
<c-effect>
<c-effect>
<c-effect>
<p-effect>
<p-effect>
<p-effect>
<p-effect>
<p-effect>
<cond-effect>
<cond-effect>
<assign-op>
<assign-op>
<assign-op>
<assign-op>
<assign-op>
<durative-action-def>
<da-symbol>
<da-def body>
<da-GD>
<da-GD>
<da-GD>
<pref-timed-GD>
<pref-timed-GD>
<timed-GD>
<timed-GD>
<time-specifier>
<time-specifier>
<interval>
<duration-constraint>
<duration-constraint>
<duration-constraint>
<simple-duration-constraint>
<simple-duration-constraint>
<d-op>
<d-op>
<d-op>
<d-value>
<d-value>
<da-effect>
<da-effect>
<da-effect>
<da-effect>
<timed-effect>
<timed-effect>
<timed-effect>
<f-assign-da>
<f-exp-da>
<f-exp-da>
<f-exp-da>
<f-exp-da>
<f-exp-da>
<assign-op-t>
<assign-op-t>
<f-exp-t>
<f-exp-t>
<f-exp-t>
<derived-def>

Daniel L. Kovacs (dkovacs@mit.bme.hu)

::=:object-fluents <function-term>
::=:object-fluents (<function-symbol> <term>*)
::=:numeric-fluents <number>
::=:numeric-fluents (<binary-op> <f-exp> <f-exp>)
::=:numeric-fluents (<multi-op> <f-exp> <f-exp>+)
::=:numeric-fluents (- <f-exp>)
::=:numeric-fluents <f-head>
::= (<function-symbol> <term>*)
::= <function-symbol>
::= <multi-op>
::= −
::= /
::= *
::= +
::= >
::= <
::= =
::= >=
::= <=
::= <letter> <any char>*
::= a..z | A..Z
::= <letter> | <digit> | - | _
::= <digit>+ [<decimal>]
::= 0..9
::= .<digit>+
::= (and <c-effect>*)
::= <c-effect>
::=:conditional−effects (forall (<typed list (variable)>) <effect>)
::=:conditional−effects (when <GD> <cond-effect>)
::= <p-effect>
::= (not <atomic formula(term)>)
::= <atomic formula(term)>
::=:numeric-fluents (<assign-op> <f-head> <f-exp>)
::=:object-fluents (assign <function-term> <term>)
::=:object-fluents (assign <function-term> undefined)
::= (and <p-effect>*)
::= <p-effect>
::= assign
::= scale-up
::= scale-down
::= increase
::= decrease
::= (:durative-action <da-symbol>
:parameters (<typed list (variable)>)
<da-def body>)
::= <name>
::= :duration <duration-constraint>
:condition <emptyOr (da-GD)>
:effect <emptyOr (da-effect)>
::= <pref-timed-GD>
::= (and <da-GD>*)
::=:universal−preconditions (forall (<typed-list (variable)>) <da-GD>)
::= <timed-GD>
::=:preferences (preference [<pref-name>] <timed-GD>)
::= (at <time-specifier> <GD>)
::= (over <interval> <GD>)
::= start
::= end
::= all
::=:duration−inequalities (and <simple-duration-constraint>+)
::= ()
::= <simple-duration-constraint>
::= (<d-op> ?duration <d-value>)
::= (at <time-specifier> <simple-duration-constraint>)
::=:duration−inequalities <=
::=:duration−inequalities >=
::= =
::= <number>
::=:numeric-fluents <f-exp>
::= (and <da-effect>*)
::= <timed-effect>
::=:conditional−effects (forall (<typed list (variable)>) <da-effect>)
::=:conditional−effects (when <da-GD> <timed-effect>)
::= (at <time-specifier> <cond-effect>)
::=:numeric-fluents (at <time-specifier> <f-assign-da>)
::=:continuous−effects + :numeric-fluents (<assign-op-t> <f-head> <f-exp-t>)
::= (<assign-op> <f-head> <f-exp-da>)
::= (<binary-op> <f-exp-da> <f-exp-da>)
::= (<multi-op> <f-exp-da> <f-exp-da>+)
::= (- <f-exp-da>)
::=:duration−inequalities ?duration
::= <f-exp>
::= increase
::= decrease
::= (* <f-exp> #t)
::= (* #t <f-exp>)
::= #t
::= (:derived <atomic formula skeleton> <GD>)

2

Complete BNF description of PDDL 3.1 (completely corrected)

Daniel L. Kovacs (dkovacs@mit.bme.hu)

1.2 Problem description
<problem>

<object declaration>
<init>
<init-el>
<init-el>
<init-el>
<init-el>
<basic-function-term>
<basic-function-term>
<goal>
<constraints>
<pref-con-GD>
<pref-con-GD>
<pref-con-GD>
<pref-con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<metric-spec>
<optimization>
<optimization>
<metric-f-exp>
<metric-f-exp>
<metric-f-exp>
<metric-f-exp>
<metric-f-exp>
<metric-f-exp>
<metric-f-exp>
<metric-f-exp>
<length-spec>

::= (define (problem <name>)
(:domain <name>)
[<require-def>]
[<object declaration>]
<init>
<goal>
[<constraints>]:constraints
[<metric-spec>]:numeric-fluents
[<length-spec>])
::= (:objects <typed list (name)>)
::= (:init <init-el>*)
::= <literal(name)>
::=:timed−initial−literals (at <number> <literal(name)>)
::=:numeric-fluents (= <basic-function-term> <number>)
::=:object-fluents (= <basic-function-term> <name>)
::= <function-symbol>
::= (<function-symbol> <name>*)
::= (:goal <pre-GD>)
::=:constraints (:constraints <pref-con-GD>)
::= (and <pref-con-GD>*)
::=:universal−preconditions (forall (<typed list (variable)>) <pref-con-GD>)
::=:preferences (preference [<pref-name>] <con-GD>)
::= <con-GD>
::= (and <con-GD>*)
::= (forall (<typed list (variable)>) <con-GD>)
::= (at end <GD>)
::= (always <GD>)
::= (sometime <GD>)
::= (within <number> <GD>)
::= (at-most-once <GD>)
::= (sometime-after <GD> <GD>)
::= (sometime-before <GD> <GD>)
::= (always-within <number> <GD> <GD>)
::= (hold-during <number> <number> <GD>)
::= (hold-after <number> <GD>)
::=:numeric-fluents (:metric <optimization> <metric-f-exp>)
::= minimize
::= maximize
::= (<binary-op> <metric-f-exp> <metric-f-exp>)
::= (<multi-op> <metric-f-exp> <metric-f-exp>+)
::= (- <metric-f-exp>)
::= <number>
::= (<function-symbol> <name>*)
::= <function-symbol>
::= total-time
::=:preferences (is-violated <pref-name>)
::= (:length [(:serial <integer>)] [(:parallel <integer>)])
The length-spec is deprecated since PDDL 2.1.

1.2.1 Lifting restrictions (from constraint declaration)
If we wish to embed modal operators into each other, then we should use these rules
instead of those in section 1.2 respectively.
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con-GD>
<con2-GD>
<con2-GD>

::=
::=
::=
::=
::=
::=
::=
::=
::=
::=
::=

(always <con2-GD>)
(sometime <con2-GD>)
(within <number> <con2-GD>)
(at-most-once <con2-GD>)
(sometime-after <con2-GD> <con2-GD>)
(sometime-before <con2-GD> <con2-GD>)
(always-within <number> <con2-GD> <con2-GD>)
(hold-during <number> <number> <con2-GD>)
(hold-after <number> <con2-GD>)
<con-GD>
<GD>

3

Complete BNF description of PDDL 3.1 (completely corrected)

Daniel L. Kovacs (dkovacs@mit.bme.hu)

1.3 Requirements
Here is a table of all requirements in PDDL3.1. Some requirements imply others; some are abbreviations for common sets of requirements. If a domain
stipulates no requirements, it is assumed to declare a requirement for :strips.
:strips
:typing
:negative-preconditions
:disjunctive-preconditions
:equality
:existential-preconditions
:universal-preconditions
:quantified-preconditions
:conditional-effects
:fluents
:numeric-fluents
:adl

:durative-actions
:duration-inequalities
:continuous-effects
:derived-predicates
:timed-initial-literals
:preferences
:constraints
:action-costs

Basic STRIPS-style adds and deletes
Allow type names in declarations of variables
Allow not in goal descriptions
Allow or in goal descriptions
Support = as built-in predicate
Allow exists in goal descriptions
Allow forall in goal descriptions
= :existential-preconditions
+ :universal-preconditions
Allow when in action effects
= :numeric-fluents
+ :object-fluents
Allow numeric function definitions and use of effects using assignment operators and arithmetic
preconditions.
= :strips + :typing
+ :negative-preconditions
+ :disjunctive-preconditions
+ :equality
+ :quantified-preconditions
+ :conditional-effects
Allows durative actions. Note that this does not imply :numeric-fluents.
Allows duration constraints in durative actions using inequalities.
Allows durative actions to affect fluents continuously over the duration of the actions.
Allows predicates whose truth value is defined by a formula
Allows the initial state to specify literals that will become true at a specified time point. Implies
:durative-actions
Allows use of preferences in action preconditions and goals.
Allows use of constraints fields in domain and problem files. These may contain modal operators
supporting trajectory constraints.
If this requirement is included in a PDDL specification, the use of numeric fluents is enabled (similar to
the :numeric-fluents requirement). However, numeric fluents may only be used in certain very
limited ways:
1.
Numeric fluents may not be used in any conditions (preconditions, goal conditions,
conditions of conditional effects, etc.).
2.
A numeric fluent may only be used as the target of an effect if it is 0-ary and called totalcost. If such an effect is used, then the total-cost fluent must be explicitly initialized
to 0 in the initial state.
3.
The only allowable use of numeric fluents in effects is in effects of the form (increase
(total-cost) <numeric-term>), where the <numeric-term> is either a nonnegative numeric constant or of the form (<function-symbol> <term>*). (The
<term> here is interpreted as shown in the PDDL grammar, i.e. it is a variable symbol or an
object constant. Note that this <term> cannot be a <function-term>, even if the object
fluents requirement is used.)
4.
No numeric fluent may be initialized to a negative value.
5.
If the problem contains a :metric specification, the objective must be (minimize
(total-cost)), or - only if the :durative-actions requirement is also set - to
minimize a linear combination of total-cost and total-time, with non-negative
coefficients.
Note that an action can have multiple effects that increase (total-cost), which is particularly useful
in the context of conditional effects.
Also note that these restrictions imply that (total-cost) never decreases throughout plan execution,
i.e., action costs are never negative.

4

Complete BNF description of PDDL 3.1 (completely corrected)

Daniel L. Kovacs (dkovacs@mit.bme.hu)

References
[1]

[2]
[3]

[4]
[5]

McDermott, D., Ghallab, M., Howe, A., Knoblock, C., Ram, A., Veloso, M.; Weld,
D., Wilkins, D. (1998). PDDL---The Planning Domain Definition Language.
Technical Report CVC TR-98-003/DCS TR-1165, Yale Center for Computational
Vision and Control, New Haven, CT.
Fox M., Long D. (2003). PDDL2.1: An Extension to pddl for Expressing Temporal
Planning Domains, Journal of Artificial Intelligence Research 20: 61-124.
Edelkamp S., Hoffmann J. (2004). PDDL2.2: The Language for the Classical Part
of the 4th International planning Competition, Technical Report No. 195, Institut
für Informatik.
Gerevini, A. Long D. (2005). BNF Description of PDDL3.0. Unpublished
manuscript from the IPC-5 website.
Helmert, M. (2008). Changes in PDDL 3.1.
http://ipc.informatik.uni-freiburg.de/PddlExtension

5

